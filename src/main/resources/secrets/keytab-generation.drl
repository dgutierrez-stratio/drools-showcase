package secrets

import com.stratio.tais.persistence.model.ServiceDeployment
import com.stratio.tais.persistence.model.GlobalParameter
import com.stratio.tais.persistence.model.ServiceDeploymentParameter
import com.stratio.tais.persistence.model.service.ServiceConfiguration
import com.stratio.tais.cns.Senses
import com.stratio.tais.senses.utils.VaultUtils
import com.stratio.tais.persistence.model.secret.KeytabSecretRequest
import com.stratio.tais.service.util.UniverseUtils

//
//
// THIS EXAMPLE ILUSTRATES HOW TO CREATE N-PRINCIPALS USING DEPLOYMENT INFORMATION AND THE REALM FROM CENTRALIZED CONFIGURATION
//
//

rule "Keytab generation for test-service"
salience 1000
when
  // ongoing deployment for any application whose service name is 'test-service'
  $deployment: ServiceDeployment(
		$sdId: uuid,
		deploymentState == ServiceDeployment.STATE_CREATING_DEPLOYMENT,
		serviceConfiguration.serviceName == "test-service",
		secretsCreated == false)
  // associated descriptor
  $configuration: ServiceConfiguration(
    $scId: uuid,
    uuid == $deployment.serviceConfigurationGlobalId)
  // instance name extracted from the descriptor under deployment
  $instance: ServiceDeploymentParameter(
    name == "serviceInstance",
    parent == $sdId)
  // global configuration parameter with the realm for generated keytabs
  $realm: GlobalParameter(name == UniverseUtils.GLOBAL_KERBEROS_REALM)
  // descriptor deployment parameter with the number of keytabs to generate dynamically
  $instances: ServiceDeploymentParameter(
    name == "keytabInstances",
    parent == $sdId)
then
  // standardization for secret names and paths
  String instanceWithPath = VaultUtils.sanitizeSecretIdentityWithPath($instance.getValue());

  // create a simple keytab
  KeytabSecretRequest keytab = new KeytabSecretRequest(
    "/userland/kerberos/".concat(instanceWithPath),
    "my-principal",
    "my-principal",
    $realm.getValue().toString());
  keytab.setParent($sdId);
  insert(keytab);

  // create N additional keytabs from deployment configuration
  Integer instances = Integer.valueOf($instances.getValue());
  for (int cont=1;cont<=instances;cont++) {
    // principal.n.my-app.mesos
    String keytabId = "principal." + cont + "." + instanceWithPath + ".mesos";
    KeytabSecretRequest anotherKeytab = new KeytabSecretRequest(
        "/userland/kerberos/".concat(instanceWithPath),
        keytabId,
        keytabId,
        $realm.getValue().toString());
      anotherKeytab.setParent($sdId);
      insert(anotherKeytab);
  }

  // change the state of the deployment to avoid creating the same secrets all over again
  $deployment.setSecretsCreated(true);
  update($deployment);
end