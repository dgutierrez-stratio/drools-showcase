package secrets

import com.stratio.tais.persistence.model.ServiceDeployment
import com.stratio.tais.persistence.model.ServiceDeploymentParameter
import com.stratio.tais.persistence.model.service.ServiceConfiguration
import com.stratio.tais.persistence.model.secret.CertificateSecretRequest
import com.stratio.tais.persistence.model.secret.CertificateWithCaSecretRequest
import com.stratio.tais.senses.service.VaultSense
import com.stratio.tais.cns.Senses
import com.stratio.tais.senses.utils.VaultUtils

//
//
// THIS EXAMPLE ILUSTRATES HOW TO CREATE STANDARD CERTIFICATES AND CERTIFICATES SIGNED BY A CUSTOM CA
//
//

rule "Certificates generation for test-service"
salience 1000
when
  // ongoing deployment for any application whose service name is 'test-service'
  $deployment: ServiceDeployment(
		$sdId: uuid,
		deploymentState == ServiceDeployment.STATE_CREATING_DEPLOYMENT,
		serviceConfiguration.serviceName == "test-service",
		secretsCreated == false)
  // associated descriptor
  $configuration: ServiceConfiguration(
    $scId: uuid,
    uuid == $deployment.serviceConfigurationGlobalId)
  // instance name extracted from the descriptor under deployment
  $instance: ServiceDeploymentParameter(
    name == "serviceInstance",
    parent == $sdId)
then
  // standardization for secret names and paths
  String instanceWithPath = VaultUtils.sanitizeSecretIdentityWithPath($instance.getValue());

  // create the request for a simple certificate and associate to the deployment
  CertificateSecretRequest certificateOne = new CertificateSecretRequest(
      "/userland/certificates/".concat(instanceWithPath),
      "my-certificate-1",
      "my-cn-1",
      "my-alt1,my-alt2");
  CertificateSecretRequest certificateTwo = new CertificateSecretRequest(
      "/userland/certificates/".concat(instanceWithPath),
      "my-certificate-2",
      "my-cn-2",
      "my-alt1,my-alt2",
      "my-on",
      "_crt");
  certificateOne.setParent($sdId);
  certificateTwo.setParent($sdId);
  // send request to Drools session
  insert(certificateOne);
  insert(certificateTwo);

  // create the request for a certificate signed by a custom CA
  CertificateWithCaSecretRequest caSigned = new CertificateWithCaSecretRequest(
      "/userland/certificates/ca-bundle",
      "/userland/certificates/my-ca-generated-certificate",
      "my-ca-certificate",
      "my-cn",
      "my-alt1,my-alt2",
      "ipSan1,ipSan2",
      "my-on");
  caSigned.setParent($sdId);
  // send request to Drools session
  insert(caSigned);

  // change the state of the deployment to avoid creating the same secrets all over again
  $deployment.setSecretsCreated(true);
  update($deployment);
end