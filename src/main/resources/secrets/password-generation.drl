package secrets

import com.stratio.tais.persistence.model.ServiceDeployment
import com.stratio.tais.persistence.model.ServiceDeploymentParameter
import com.stratio.tais.persistence.model.service.ServiceConfiguration
import com.stratio.tais.persistence.model.ErrorConcept
import com.stratio.tais.cns.Senses
import com.stratio.tais.senses.utils.VaultUtils
import com.stratio.tais.persistence.model.secret.PasswordSecretRequest
import com.stratio.tais.senses.service.VaultSense
import com.stratio.tais.service.util.UniverseUtils
import com.stratio.tais.cns.exceptions.MesosSecretException

//
//
// THIS EXAMPLE ILUSTRATES HOW TO CREATE PASSWORDS USING UTILITIES PROVIDED BY COMMAND CENTER
//
//

rule "Password generation for test-service"
salience 1000
when
  // ongoing deployment for any application whose service name is 'test-service'
  $deployment: ServiceDeployment(
		$sdId: uuid,
		deploymentState == ServiceDeployment.STATE_CREATING_DEPLOYMENT,
		serviceConfiguration.serviceName == "test-service",
		secretsCreated == false)
  // associated descriptor
  $configuration: ServiceConfiguration(
    $scId: uuid,
    uuid == $deployment.serviceConfigurationGlobalId)
  // instance name extracted from the descriptor under deployment
  $instance: ServiceDeploymentParameter(
    name == "serviceInstance",
    parent == $sdId)
  // mesos principal extracted from the descriptor under deployment
  $principal: ServiceDeploymentParameter(
    name == UniverseUtils.PARAM_MESOS_PPAL,
    parent == $sdId)
  // avoid firing this rule again if any error is present in the session
  not (exists (ErrorConcept(parent == $sdId)))
then
  // standardization for secret names and paths
  String instanceWithPath = VaultUtils.sanitizeSecretIdentityWithPath($instance.getValue());

  // utilities for secrets generation
  VaultSense vault = Senses.access(VaultSense.class);

  // create a password using the platform's Single Sign On user and password information
  PasswordSecretRequest sso = new PasswordSecretRequest(
      "/userland/passwords/".concat(instanceWithPath),
      "sso",
      vault.getSingleSignOnUser(),
      vault.getSingleSignOnPassword());
  sso.setParent($sdId);
  insert(sso);

  // create a password using Mesos secret and handle possible errors
  String mesosPasswordPath = "/userland/passwords/".concat(instanceWithPath);
  try {
    PasswordSecretRequest mesos = new PasswordSecretRequest(
        mesosPasswordPath,
        "mesos",
        $principal.getValue(),
        vault.getMesosSecret($principal.getValue()));
    mesos.setParent($sdId);
    insert(mesos);

    // change the state of the deployment to avoid creating the same secrets all over again
    $deployment.setSecretsCreated(true);
    update($deployment);

  } catch (MesosSecretException e) {
    // this error will be registered and logged, preventing the deployment of the application
    ErrorConcept error = new ErrorConcept(ErrorConcept.SECRETS_ERROR, "Unable to obtain Mesos secret from Vault",
      mesosPasswordPath, $sdId);
    insert(error);
  }
end